from abc import ABC, abstractmethod

# === Product (–ü—Ä–æ–¥—É–∫—Ç) ===
class Transport(ABC):
    @abstractmethod
    def deliver(self):
        pass


# === Concrete Products (–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã) ===
class Truck(Transport):
    def deliver(self):
        return "Delivering goods by land in a truck üöö"


class Ship(Transport):
    def deliver(self):
        return "Delivering goods by sea in a ship üö¢"


class Plane(Transport):
    def deliver(self):
        return "Delivering goods by air in a plane ‚úàÔ∏è"


# === Creator (–°–æ–∑–¥–∞—Ç–µ–ª—å) ===
class Logistics(ABC):
    @abstractmethod
    def create_transport(self):
        pass

    def plan_delivery(self):
        transport = self.create_transport()   # üëà —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
        print("Planning delivery...")
        print(transport.deliver())
        print("Delivery completed!\n")


# === Concrete Creators (–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏) ===
class RoadLogistics(Logistics):
    def create_transport(self):
        return Truck()


class SeaLogistics(Logistics):
    def create_transport(self):
        return Ship()


class AirLogistics(Logistics):
    def create_transport(self):
        return Plane()


# === Client Code (–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥) ===
if __name__ == "__main__":
    logistics_list = [RoadLogistics(), SeaLogistics(), AirLogistics()]

    for logistics in logistics_list:
        logistics.plan_delivery()
